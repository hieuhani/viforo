// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Prepare for user service
model Account {
  id            String  @id @default(uuid()) @db.Uuid
  username      String  @unique
  email         String  @unique
  emailVerified Boolean @default(false)
  firstName     String
  lastName      String?
  password      String
  avatar        String?
}

model User {
  id          Int          @id @default(autoincrement())
  accountId   String       @unique
  groups      GroupUser[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  threads     Thread[]
  posts       Post[]
  attachments Attachment[]
}

model Group {
  id          Int               @id @default(autoincrement())
  name        String
  type        String?
  color       String?
  icon        String?
  default     Int?              @default(0)
  users       GroupUser[]
  permissions GroupPermission[]
}

model GroupPermission {
  id             Int    @id @default(autoincrement())
  group          Group  @relation(fields: [groupId], references: [id])
  nampermissione String
  groupId        Int
}

model GroupUser {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@id([userId, groupId])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  description String?  @db.Text
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  threads     Thread[]
}

model Thread {
  id         Int       @id @default(autoincrement())
  title      String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  isDraft    Boolean   @default(false)
  isDisplay  Boolean   @default(true)
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  posts      Post[]
}

model Post {
  id          Int     @id @default(autoincrement())
  thread      Thread? @relation(fields: [threadId], references: [id])
  threadId    Int?
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  replyPostId Int?
  replyPost   Post?   @relation("ReplyPosts", fields: [replyPostId], references: [id])
  replies     Post[]  @relation("ReplyPosts")
  content     String  @db.Text

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
}

model Attachment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  fileSize  Int
  mimeType  String
  fileName  String
  filePath  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  code String @id
  icon String
}
